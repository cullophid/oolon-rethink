// Generated by CoffeeScript 1.10.0
(function() {
  var all, changes, curry, filter, getAll, insert, parseUrl, rethink, toArray;

  rethink = require('rethinkdb');

  parseUrl = require('url').parse;

  curry = require('ramda').curry;

  toArray = (function(_this) {
    return function(query) {
      return query.then(function(cursor) {
        return cursor.toArray();
      });
    };
  })(this);

  changes = curry((function(_this) {
    return function(table, conn) {
      return rethink.table(table).changes().run(conn);
    };
  })(this));

  all = curry((function(_this) {
    return function(table, conn) {
      return toArray(rethink.table(table).run(conn));
    };
  })(this));

  insert = curry((function(_this) {
    return function(table, doc, conn) {
      return rethink.table(table).insert(doc).run(conn);
    };
  })(this));

  getAll = curry((function(_this) {
    return function(table, ids, conn) {
      return toArray(rethink.table(table).getAll(ids).run(conn));
    };
  })(this));

  filter = curry((function(_this) {
    return function(table, filter, conn) {
      return toArray(rethink.table(table).filter(filter).run(conn));
    };
  })(this));

  module.exports = (function(_this) {
    return function(url) {
      var connection, hostname, port, ref;
      ref = parseUrl(url), hostname = ref.hostname, port = ref.port;
      connection = rethink.connect({
        host: hostname,
        port: port
      })["catch"](function(err) {
        console.error('CONNECTION ERROR', err);
        return process.exit(1);
      });
      return {
        all: function(table) {
          return connection.then(all(table));
        },
        changes: function(table) {
          return connection.then(changes(table));
        },
        insert: curry(function(table, doc) {
          return connection.then(insert(table, doc));
        }),
        getAll: curry(function(table, ids) {
          return connection.then(getAll(table, ids));
        }),
        filter: curry(function(table, filter) {
          return connection.then(filter(table, filter));
        })
      };
    };
  })(this);

}).call(this);
